// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client  {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTests TestTemplate[]
  testAttempts TestAttempt[]

  @@map("users")
}

model TestTemplate {
  id          String   @id @default(cuid())
  title       String
  prompt      String
  difficulty  Difficulty
  subject     String
  educationLevel EducationLevel
  mcqCount    Int
  shortAnswerCount Int
  questions   Json     // Store generated questions
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId   String
  creator     User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attempts    TestAttempt[]

  @@map("test_templates")
}

model TestAttempt {
  id                String   @id @default(cuid())
  testTitle         String
  questions         Json
  answers           Json
  score             Float?
  totalMarks        Float
  timeTaken         Int      // in seconds
  isCompleted       Boolean  @default(false)
  feedback          Json?
  overallFeedback   String?
  answeredQuestions Int
  totalQuestions    Int
  submittedAt       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  testId     String
  test       TestTemplate @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("test_attempts")
}


enum Difficulty {
  EASY
  INTERMEDIATE
  HARD
}

enum EducationLevel {
  ELEMENTARY
  MIDDLE_SCHOOL
  HIGH_SCHOOL
  COLLEGE
  GRADUATE
}

